<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Thronix Trading Platform</title>
  <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    body { background: #1a202c; color: white; font-family: sans-serif; }
    .glass { background: rgba(255 255 255 / 0.1); backdrop-filter: blur(10px); border-radius: 0.5rem; padding: 1rem; }
    .chat-user { background: #2563eb; padding: 0.5rem; border-radius: 0.5rem; margin-left: auto; max-width: 60%; }
    .chat-bot { background: #374151; padding: 0.5rem; border-radius: 0.5rem; margin-right: auto; max-width: 60%; }
  </style>
</head>
<body>
  <div id="root"></div>
  <script type="text/babel">
    const { useState, useEffect, useRef } = React;
    const socket = io();

    function App() {
      const [user, setUser] = useState(null);
      const [loading, setLoading] = useState(true);

      useEffect(() => {
        axios.get('/api/auth/me').then(res => {
          setUser(res.data.user);
        }).catch(() => setUser(null)).finally(() => setLoading(false));
      }, []);

      if (loading) return <div className="p-4">Loading...</div>;
      if (!user) return <Login onLogin={setUser} />;

      return <Dashboard user={user} onLogout={() => { axios.post('/api/auth/logout').then(() => setUser(null)); }} />;
    }

    function Login({ onLogin }) {
      const [email, setEmail] = useState('demo@thronix.com');
      const [password, setPassword] = useState('demo123');
      const [loading, setLoading] = useState(false);

      const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        try {
          const res = await axios.post('/api/auth/login', { email, password });
          onLogin(res.data.user);
        } catch {
          alert('Login failed');
        }
        setLoading(false);
      };

      return (
        <div className="max-w-md mx-auto mt-20 glass">
          <h2 className="text-2xl mb-4">Thronix Login</h2>
          <form onSubmit={handleSubmit} className="space-y-4">
            <input type="email" className="w-full p-2 rounded" value={email} onChange={e => setEmail(e.target.value)} required placeholder="Email" />
            <input type="password" className="w-full p-2 rounded" value={password} onChange={e => setPassword(e.target.value)} required placeholder="Password" />
            <button type="submit" className="w-full bg-blue-600 py-2 rounded">{loading ? 'Logging in...' : 'Login'}</button>
          </form>
          <p className="mt-4 text-sm text-gray-400">Demo: demo@thronix.com / demo123</p>
        </div>
      );
    }

    function Dashboard({ user, onLogout }) {
      const [orderAlerts, setOrderAlerts] = useState([]);
      const [sentiment, setSentiment] = useState(0);
      const [pricePrediction, setPricePrediction] = useState(0);
      const [strategySymbol, setStrategySymbol] = useState('BTCUSDT');
      const [strategyCurrent, setStrategyCurrent] = useState('');
      const [strategySuggestions, setStrategySuggestions] = useState([]);
      const [strategyLoading, setStrategyLoading] = useState(false);
      const [chatInput, setChatInput] = useState('');
      const [chatMessages, setChatMessages] = useState([]);

      const chatEndRef = useRef();

      useEffect(() => {
        loadOrderAlerts();
        loadSentiment();
        loadPricePrediction();
        socket.on('orderAlert', alert => {
          setOrderAlerts(prev => [alert, ...prev].slice(0, 20));
        });
        const intervalSentiment = setInterval(loadSentiment, 60000);
        const intervalPrediction = setInterval(loadPricePrediction, 60000);
        return () => {
          socket.off('orderAlert');
          clearInterval(intervalSentiment);
          clearInterval(intervalPrediction);
        };
      }, []);

      useEffect(() => {
        chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
      }, [chatMessages]);

      const loadOrderAlerts = async () => {
        try {
          const res = await axios.get('/api/order-alerts');
          setOrderAlerts(res.data);
        } catch {}
      };
      const loadSentiment = async () => {
        try {
          const res = await axios.get('/api/market/sentiment');
          setSentiment(res.data.sentimentScore);
        } catch {}
      };
      const loadPricePrediction = async () => {
        try {
          const res = await axios.get('/api/market/price-prediction');
          setPricePrediction(res.data.predictedPrice);
        } catch {}
      };

      const getStrategySuggestions = async () => {
        setStrategyLoading(true);
        try {
          const res = await axios.post('/api/ai/strategy-suggestion', {
            symbol: strategySymbol,
            currentStrategy: strategyCurrent
          });
          setStrategySuggestions(res.data.suggestions);
        } catch {
          alert('Failed to get strategy suggestions');
        }
        setStrategyLoading(false);
      };

      const sendChat = async () => {
        if (!chatInput.trim()) return;
        setChatMessages([...chatMessages, { from: 'user', text: chatInput }]);
        const msg = chatInput;
        setChatInput('');
        try {
          const res = await axios.post('/api/ai/chat', { message: msg });
          setChatMessages(prev => [...prev, { from: 'bot', text: res.data.reply }]);
        } catch {
          setChatMessages(prev => [...prev, { from: 'bot', text: 'AI chat failed' }]);
        }
      };

      return (
        <div className="max-w-7xl mx-auto p-4 space-y-6">
          <header className="flex justify-between items-center">
            <h1 className="text-3xl">Welcome, {user.name}</h1>
            <button onClick={onLogout} className="bg-red-600 px-4 py-2 rounded">Logout</button>
          </header>

          <section className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="glass p-4 max-h-96 overflow-auto">
              <h2 className="text-xl mb-2">Live Order Alerts</h2>
              <ul>
                {orderAlerts.length === 0 && <li>No alerts yet</li>}
                {orderAlerts.map(alert => (
                  <li key={alert.id} className="mb-1">
                    <strong>{alert.side}</strong> {alert.quantity} {alert.symbol} @ ${alert.price} <br />
                    <small>{new Date(alert.time).toLocaleTimeString()}</small>
                  </li>
                ))}
              </ul>
            </div>

            <div className="glass p-4">
              <h2 className="text-xl mb-2">Market Sentiment</h2>
              <div
                className={`text-5xl font-bold ${
                  sentiment > 0.3 ? 'text-green-400' : sentiment < -0.3 ? 'text-red-400' : 'text-yellow-400'
                }`}
              >
                {sentiment.toFixed(2)}
              </div>
            </div>

            <div className="glass p-4">
              <h2 className="text-xl mb-2">Price Prediction (Next Hour)</h2>
              <div className="text-4xl font-bold text-blue-400">${pricePrediction.toFixed(2)}</div>
            </div>
          </section>

          <section className="glass p-4 max-w-md">
            <h2 className="text-xl mb-2">AI Strategy Suggestions</h2>
            <input
              type="text"
              className="w-full mb-2 p-2 rounded text-black"
              placeholder="Symbol e.g. BTCUSDT"
              value={strategySymbol}
              onChange={e => setStrategySymbol(e.target.value.toUpperCase())}
            />
            <input
              type="text"
              className="w-full mb-2 p-2 rounded text-black"
              placeholder="Current Strategy (optional)"
              value={strategyCurrent}
              onChange={e => setStrategyCurrent(e.target.value)}
            />
            <button
              className="bg-green-600 px-4 py-2 rounded text-white"
              onClick={getStrategySuggestions}
              disabled={strategyLoading}
            >
              {strategyLoading ? 'Loading...' : 'Get Suggestions'}
            </button>
            <ul className="mt-2 list-disc list-inside">
              {strategySuggestions.length === 0 && <li>No suggestions</li>}
              {strategySuggestions.map((s, i) => <li key={i}>{s}</li>)}
            </ul>
          </section>

          <section className="glass p-4 max-w-xl max-h-96 overflow-auto">
            <h2 className="text-xl mb-2">Chat with AI</h2>
            <div style={{ minHeight: 150 }} className="mb-2 overflow-auto">
              {chatMessages.length === 0 && <p className="text-gray-400 italic">Say hi to the AI assistant...</p>}
              {chatMessages.map((msg, i) => (
                <div
                  key={i}
                  className={msg.from === 'user' ? 'chat-user' : 'chat-bot'}
                >
                  {msg.text}
                </div>
              ))}
              <div ref={chatEndRef} />
            </div>
            <div className="flex gap-2">
              <input
                type="text"
                className="flex-grow p-2 rounded text-black"
                value={chatInput}
                onChange={e => setChatInput(e.target.value)}
                onKeyDown={e => { if (e.key === 'Enter') sendChat(); }}
                placeholder="Type a message..."
              />
              <button className="bg-blue-700 px-4 py-2 rounded text-white" onClick={sendChat}>Send</button>
            </div>
          </section>
        </div>
      );
    }

    ReactDOM.createRoot(document.getElementById('root')).render(<App />);
  </script>
</body>
</html>
