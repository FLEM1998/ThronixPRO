# THRONIXPRO COMPLETE SOURCE CODE PACKAGE
# ===============================================
# Live Cryptocurrency Trading Platform
# All 126 source files included below
# Copy this entire content to recreate your platform
# ===============================================

# SETUP INSTRUCTIONS:
# 1. Create new project folder
# 2. Copy each file section below to corresponding path
# 3. Run: npm install
# 4. Set environment variables
# 5. Run: npm run dev

# ===============================================
# ROOT FILES
# ===============================================

## FILE: package.json
{
  "name": "rest-express",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "dev": "NODE_ENV=development tsx server/index.ts",
    "build": "vite build && tsc server/index.ts --outDir dist --target es2020 --module commonjs --esModuleInterop --skipLibCheck --resolveJsonModule",
    "start": "node dist/index.js",
    "db:generate": "drizzle-kit generate",
    "db:push": "drizzle-kit push",
    "db:migrate": "drizzle-kit migrate",
    "db:studio": "drizzle-kit studio"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@neondatabase/serverless": "^0.10.1",
    "@radix-ui/react-accordion": "^1.2.1",
    "@radix-ui/react-alert-dialog": "^1.1.2",
    "@radix-ui/react-aspect-ratio": "^1.1.1",
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-checkbox": "^1.1.2",
    "@radix-ui/react-collapsible": "^1.1.1",
    "@radix-ui/react-context-menu": "^2.2.2",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.2",
    "@radix-ui/react-hover-card": "^1.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.2",
    "@radix-ui/react-navigation-menu": "^1.2.1",
    "@radix-ui/react-popover": "^1.1.2",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-scroll-area": "^1.2.0",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.1",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.1",
    "@radix-ui/react-toast": "^1.2.2",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.3",
    "@sendgrid/mail": "^8.1.4",
    "@tailwindcss/typography": "^0.5.15",
    "@tailwindcss/vite": "^4.0.0-beta.7",
    "@tanstack/react-query": "^5.62.3",
    "axios": "^1.7.9",
    "bcryptjs": "^2.4.3",
    "ccxt": "^4.4.37",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.4",
    "connect-pg-simple": "^10.0.0",
    "crypto": "^1.0.1",
    "date-fns": "^4.1.0",
    "drizzle-kit": "^0.31.2",
    "drizzle-orm": "^0.39.0",
    "drizzle-zod": "^0.5.1",
    "embla-carousel-react": "^8.3.1",
    "express": "^4.21.2",
    "express-session": "^1.18.1",
    "framer-motion": "^11.15.0",
    "input-otp": "^1.4.1",
    "jsonwebtoken": "^9.0.2",
    "lightweight-charts": "^4.2.0",
    "lucide-react": "^0.468.0",
    "memorystore": "^1.6.7",
    "next-themes": "^0.4.4",
    "openid-client": "^6.1.5",
    "passport": "^0.7.0",
    "passport-local": "^1.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^9.4.4",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.54.0",
    "react-icons": "^5.4.0",
    "react-resizable-panels": "^2.1.7",
    "recharts": "^2.13.3",
    "resend": "^4.0.1",
    "socket.io": "^4.8.1",
    "socket.io-client": "^4.8.1",
    "tailwind-merge": "^2.5.4",
    "tailwindcss": "^3.4.17",
    "tailwindcss-animate": "^1.0.7",
    "tsx": "^4.19.2",
    "tw-animate-css": "^0.3.9",
    "vaul": "^1.1.0",
    "wouter": "^3.3.6",
    "ws": "^8.18.0",
    "zod": "^3.24.1",
    "zod-validation-error": "^3.4.0"
  },
  "devDependencies": {
    "@replit/vite-plugin-cartographer": "^0.18.4",
    "@replit/vite-plugin-runtime-error-modal": "^0.5.3",
    "@types/connect-pg-simple": "^7.0.3",
    "@types/express": "^5.0.0",
    "@types/express-session": "^1.18.0",
    "@types/jsonwebtoken": "^9.0.7",
    "@types/node": "^22.10.1",
    "@types/passport": "^1.0.16",
    "@types/passport-local": "^1.0.38",
    "@types/react": "^18.3.13",
    "@types/react-dom": "^18.3.1",
    "@types/ws": "^8.5.13",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.20",
    "esbuild": "^0.24.0",
    "postcss": "^8.5.3",
    "typescript": "^5.7.2",
    "vite": "^6.0.1"
  }
}

## FILE: tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./client/src/*"],
      "@shared/*": ["./shared/*"]
    }
  },
  "include": ["client/src", "shared", "server"],
  "references": [{ "path": "./tsconfig.node.json" }]
}

## FILE: vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import { cartographer } from "@replit/vite-plugin-cartographer";
import { runtimeErrorModal } from "@replit/vite-plugin-runtime-error-modal";

export default defineConfig({
  plugins: [
    react(),
    cartographer(),
    runtimeErrorModal()
  ],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./client/src"),
      "@shared": path.resolve(__dirname, "./shared"),
      "@assets": path.resolve(__dirname, "./attached_assets"),
    },
  },
  root: "client",
  build: {
    outDir: "../dist/public",
    emptyOutDir: true,
  },
});

## FILE: tailwind.config.ts
import type { Config } from "tailwindcss";

const config: Config = {
  darkMode: ["class"],
  content: [
    "./client/src/**/*.{js,ts,jsx,tsx,mdx}",
    "./client/index.html",
  ],
  theme: {
    extend: {
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      colors: {
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        chart: {
          "1": "hsl(var(--chart-1))",
          "2": "hsl(var(--chart-2))",
          "3": "hsl(var(--chart-3))",
          "4": "hsl(var(--chart-4))",
          "5": "hsl(var(--chart-5))",
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
};

export default config;

## FILE: drizzle.config.ts
import type { Config } from "drizzle-kit";

if (!process.env.DATABASE_URL) {
  throw new Error("DATABASE_URL is required");
}

export default {
  schema: "./shared/schema.ts",
  out: "./drizzle",
  dialect: "postgresql",
  dbCredentials: {
    url: process.env.DATABASE_URL,
  },
} satisfies Config;

## FILE: index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>ThronixPRO</title>
  <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    body { background: #1a202c; color: white; font-family: sans-serif; }
    .glass { background: rgba(255 255 255 / 0.1); backdrop-filter: blur(10px); border-radius: 0.5rem; padding: 1rem; }
    .chat-user { background: #2563eb; padding: 0.5rem; border-radius: 0.5rem; margin-left: auto; max-width: 60%; }
    .chat-bot { background: #374151; padding: 0.5rem; border-radius: 0.5rem; margin-right: auto; max-width: 60%; }
  </style>
</head>
<body>
  <div id="root"></div>
  <script type="text/babel">
    const { useState, useEffect, useRef } = React;
    const socket = io();

    function App() {
      const [user, setUser] = useState(null);
      const [loading, setLoading] = useState(true);

      useEffect(() => {
        axios.get('/api/auth/me').then(res => {
          setUser(res.data.user);
        }).catch(() => setUser(null)).finally(() => setLoading(false));
      }, []);

      if (loading) return <div className="p-4">Loading...</div>;
      if (!user) return <Login onLogin={setUser} />;

      return <Dashboard user={user} onLogout={() => { axios.post('/api/auth/logout').then(() => setUser(null)); }} />;
    }

    function Login({ onLogin }) {
      const [email, setEmail] = useState('');
      const [password, setPassword] = useState('');
      const [loading, setLoading] = useState(false);

      const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        try {
          const res = await axios.post('/api/auth/login', { email, password });
          onLogin(res.data.user);
        } catch {
          alert('Login failed');
        }
        setLoading(false);
      };

      return (
        <div className="max-w-md mx-auto mt-20 glass">
          <h2 className="text-2xl mb-4">Thronix Login</h2>
          <form onSubmit={handleSubmit} className="space-y-4">
            <input type="email" className="w-full p-2 rounded" value={email} onChange={e => setEmail(e.target.value)} required placeholder="Email" />
            <input type="password" className="w-full p-2 rounded" value={password} onChange={e => setPassword(e.target.value)} required placeholder="Password" />
            <button type="submit" className="w-full bg-blue-600 py-2 rounded">{loading ? 'Logging in...' : 'Login'}</button>
          </form>

        </div>
      );
    }

    function Dashboard({ user, onLogout }) {
      const [orderAlerts, setOrderAlerts] = useState([]);
      const [sentiment, setSentiment] = useState(0);
      const [pricePrediction, setPricePrediction] = useState(0);
      const [strategySymbol, setStrategySymbol] = useState('BTCUSDT');
      const [strategyCurrent, setStrategyCurrent] = useState('');
      const [strategySuggestions, setStrategySuggestions] = useState([]);
      const [strategyLoading, setStrategyLoading] = useState(false);
      const [chatInput, setChatInput] = useState('');
      const [chatMessages, setChatMessages] = useState([]);

      const chatEndRef = useRef();

      useEffect(() => {
        loadOrderAlerts();
        loadSentiment();
        loadPricePrediction();
        socket.on('orderAlert', alert => {
          setOrderAlerts(prev => [alert, ...prev].slice(0, 20));
        });
        const intervalSentiment = setInterval(loadSentiment, 60000);
        const intervalPrediction = setInterval(loadPricePrediction, 60000);
        return () => {
          socket.off('orderAlert');
          clearInterval(intervalSentiment);
          clearInterval(intervalPrediction);
        };
      }, []);

      useEffect(() => {
        chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
      }, [chatMessages]);

      const loadOrderAlerts = async () => {
        try {
          const res = await axios.get('/api/order-alerts');
          setOrderAlerts(res.data);
        } catch {}
      };
      const loadSentiment = async () => {
        try {
          const res = await axios.get('/api/market/sentiment');
          setSentiment(res.data.sentimentScore);
        } catch {}
      };
      const loadPricePrediction = async () => {
        try {
          const res = await axios.get('/api/market/price-prediction');
          setPricePrediction(res.data.predictedPrice);
        } catch {}
      };

      const getStrategySuggestions = async () => {
        setStrategyLoading(true);
        try {
          const res = await axios.post('/api/ai/strategy-suggestion', {
            symbol: strategySymbol,
            currentStrategy: strategyCurrent
          });
          setStrategySuggestions(res.data.suggestions);
        } catch {
          alert('Failed to get strategy suggestions');
        }
        setStrategyLoading(false);
      };

      const sendChat = async () => {
        if (!chatInput.trim()) return;
        setChatMessages([...chatMessages, { from: 'user', text: chatInput }]);
        const msg = chatInput;
        setChatInput('');
        try {
          const res = await axios.post('/api/ai/chat', { message: msg });
          setChatMessages(prev => [...prev, { from: 'bot', text: res.data.reply }]);
        } catch {
          setChatMessages(prev => [...prev, { from: 'bot', text: 'AI chat failed' }]);
        }
      };

      return (
        <div className="max-w-7xl mx-auto p-4 space-y-6">
          <header className="flex justify-between items-center">
            <h1 className="text-3xl">Welcome, {user.name}</h1>
            <button onClick={onLogout} className="bg-red-600 px-4 py-2 rounded">Logout</button>
          </header>

          <section className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="glass p-4 max-h-96 overflow-auto">
              <h2 className="text-xl mb-2">Live Order Alerts</h2>
              <ul>
                {orderAlerts.length === 0 && <li>No alerts yet</li>}
                {orderAlerts.map(alert => (
                  <li key={alert.id} className="mb-1">
                    <strong>{alert.side}</strong> {alert.quantity} {alert.symbol} @ ${alert.price} <br />
                    <small>{new Date(alert.time).toLocaleTimeString()}</small>
                  </li>
                ))}
              </ul>
            </div>

            <div className="glass p-4">
              <h2 className="text-xl mb-2">Market Sentiment</h2>
              <div
                className={`text-5xl font-bold ${
                  sentiment > 0.3 ? 'text-green-400' : sentiment < -0.3 ? 'text-red-400' : 'text-yellow-400'
                }`}
              >
                {sentiment.toFixed(2)}
              </div>
            </div>

            <div className="glass p-4">
              <h2 className="text-xl mb-2">Price Prediction (Next Hour)</h2>
              <div className="text-4xl font-bold text-blue-400">${pricePrediction.toFixed(2)}</div>
            </div>
          </section>

          <section className="glass p-4 max-w-md">
            <h2 className="text-xl mb-2">AI Strategy Suggestions</h2>
            <input
              type="text"
              className="w-full mb-2 p-2 rounded text-black"
              placeholder="Symbol e.g. BTCUSDT"
              value={strategySymbol}
              onChange={e => setStrategySymbol(e.target.value.toUpperCase())}
            />
            <input
              type="text"
              className="w-full mb-2 p-2 rounded text-black"
              placeholder="Current Strategy (optional)"
              value={strategyCurrent}
              onChange={e => setStrategyCurrent(e.target.value)}
            />
            <button
              className="bg-green-600 px-4 py-2 rounded text-white"
              onClick={getStrategySuggestions}
              disabled={strategyLoading}
            >
              {strategyLoading ? 'Loading...' : 'Get Suggestions'}
            </button>
            <ul className="mt-2 list-disc list-inside">
              {strategySuggestions.length === 0 && <li>No suggestions</li>}
              {strategySuggestions.map((s, i) => <li key={i}>{s}</li>)}
            </ul>
          </section>

          <section className="glass p-4 max-w-xl max-h-96 overflow-auto">
            <h2 className="text-xl mb-2">Chat with AI</h2>
            <div style={{ minHeight: 150 }} className="mb-2 overflow-auto">
              {chatMessages.length === 0 && <p className="text-gray-400 italic">Say hi to the AI assistant...</p>}
              {chatMessages.map((msg, i) => (
                <div
                  key={i}
                  className={msg.from === 'user' ? 'chat-user' : 'chat-bot'}
                >
                  {msg.text}
                </div>
              ))}
              <div ref={chatEndRef} />
            </div>
            <div className="flex gap-2">
              <input
                type="text"
                className="flex-grow p-2 rounded text-black"
                value={chatInput}
                onChange={e => setChatInput(e.target.value)}
                onKeyDown={e => { if (e.key === 'Enter') sendChat(); }}
                placeholder="Type a message..."
              />
              <button className="bg-blue-700 px-4 py-2 rounded text-white" onClick={sendChat}>Send</button>
            </div>
          </section>
        </div>
      );
    }

    ReactDOM.createRoot(document.getElementById('root')).render(<App />);
  </script>
</body>
</html>

## FILE: components.json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "client/src/index.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}

# ===============================================
# BACKEND SERVER FILES
# ===============================================