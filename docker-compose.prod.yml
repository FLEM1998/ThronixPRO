version: '3.8'

services:
  thronixpro:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - SESSION_SECRET=${SESSION_SECRET}
    volumes:
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
    networks:
      - thronix-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx:rw
    depends_on:
      - thronixpro
    restart: unless-stopped
    networks:
      - thronix-network

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-thronixpro2025}
    volumes:
      - redis-data:/data
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - thronix-network

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-thronixpro}
      POSTGRES_USER: ${POSTGRES_USER:-thronixpro}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-securepassword}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backups:/backups
    restart: unless-stopped
    ports:
      - "5432:5432"
    networks:
      - thronix-network

volumes:
  redis-data:
  postgres-data:

networks:
  thronix-network:
    driver: bridge